@* _WikipediaTooltipPartial.cshtml *@
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Debounce function to prevent rapid API calls
        const debounce = (func, delay) => {
            let timeoutId;
            return (...args) => {
                clearTimeout(timeoutId);
                timeoutId = setTimeout(() => func.apply(this, args), delay);
            };
        };

        const showTooltip = async (element, teamName) => {
            const position = element.getBoundingClientRect();

            // Create tooltip
            const tooltip = document.createElement('div');
            tooltip.className = 'wiki-tooltip';
            tooltip.style.top = `${position.bottom + window.scrollY + 15}px`;
            tooltip.style.left = `${position.left + window.scrollX}px`;

            tooltip.innerHTML = `
                <div class="d-flex justify-content-center py-3">
                    <div class="spinner-grow text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            `;
            document.body.appendChild(tooltip);

            // Remove tooltip function
            const removeTooltip = () => {
                tooltip.classList.add('fade-out');
                setTimeout(() => tooltip.remove(), 200);
            };

            try {
                const response = await fetch(`/api/wiki/${encodeURIComponent(teamName)}`);

                if (!response.ok) {
                    const error = await response.json();
                    throw new Error(error.error || 'Failed to load team info');
                }

                const data = await response.json();

                tooltip.innerHTML = `
                    <div class="wiki-tooltip-content">
                        <h5 class="mb-2">${data.name}</h5>
                        ${data.imageUrl ? `
                            <img src="${data.imageUrl}"
                                 class="wiki-tooltip-img rounded"
                                 alt="${data.name} logo">` : ''}
                        <p class="mb-2">${data.summary.split('. ').slice(0, 2).join('. ')}...</p>
                        <div class="d-flex justify-content-end">
                            <a href="${data.wikipediaUrl}"
                               target="_blank"
                               class="btn btn-sm btn-outline-primary">
                                Full Article
                            </a>
                        </div>
                    </div>
                `;
            } catch (error) {
                tooltip.innerHTML = `
                    <div class="alert alert-warning m-0 p-2">
                        <i class="fas fa-exclamation-circle me-2"></i>
                        ${error.message}
                    </div>
                `;
            }

            function handleClickOutside(event) {
                if (!element.contains(event.target) && !tooltip.contains(event.target)) {
                removeTooltip();
                document.removeEventListener('click', handleClickOutside);
                }
            }

            document.addEventListener('click', handleClickOutside);

        };

        

        // Attach debounced event listeners
        document.querySelectorAll('[data-team-name]').forEach(element => {
            const debouncedShow = debounce(() => {
                showTooltip(element, element.getAttribute('data-team-name'));
            }, 300);

            element.addEventListener('click', debouncedShow);
        });
    });

        const wikiCache = {};

    async function fetchTeamInfo(teamName) {
        if (wikiCache[teamName]) {
            return wikiCache[teamName];
        }

        const response = await fetch(`/api/teaminfo/${teamName}`);
        const data = await response.json();
        wikiCache[teamName] = data;
        return data;
    }
</script>
