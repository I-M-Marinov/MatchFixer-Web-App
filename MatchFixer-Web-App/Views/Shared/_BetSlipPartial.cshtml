@model MatchFixer.Core.DTOs.Bets.BetSlipState

<form asp-controller="Bet" asp-action="PlaceBet" method="post" id="betSlipForm">
	@Html.AntiForgeryToken()
	<div id="betSlipPanel" class="bet-slip-panel shadow-lg">
		<div class="bet-slip-header d-flex justify-content-between align-items-center p-3">
			<h5>Your Bet Slip</h5>
		</div>

		<div id="betSlipContent" class="p-3">
			@if (Model?.Bets == null || !Model.Bets.Any())
			{
				<p class="mt-5">Bet slip is empty.</p>
				<p>
					Check the <a href="@Url.Action("LiveEvents", "Event")" class="btn btn-link btn-sm">Events Board</a> to bet on an event.
				</p>
			}
			else
			{
				foreach (var bet in Model.Bets)
				{
					<div class="bet-item border rounded p-2 mb-2" data-start-time="@bet.StartTimeUtc" data-match-id="@bet.MatchId" data-option="@bet.SelectedOption">
						<div class="d-flex justify-content-between">
							<div>
								<strong>@bet.HomeTeam</strong> vs <strong>@bet.AwayTeam</strong><br />
								Pick: <span class="text-info">@bet.SelectedOption</span><br />
								Odds: <span class="bet-odds">@bet.Odds</span>
								<span class="odds-change-badge"></span>
							</div>
							<div class="text-end">
								<span class="badge status-badge bg-secondary"></span>
							</div>

						</div>

						<input type="hidden" name="Bets[@Model.Bets.IndexOf(bet)].MatchId" value="@bet.MatchId" />
						<input type="hidden" name="Bets[@Model.Bets.IndexOf(bet)].SelectedOption" value="@bet.SelectedOption" />
						<input type="hidden" name="Bets[@Model.Bets.IndexOf(bet)].Odds" value="@bet.Odds" />
						<input type="hidden" name="Bets[@Model.Bets.IndexOf(bet)].HomeTeam" value="@bet.HomeTeam" />
						<input type="hidden" name="Bets[@Model.Bets.IndexOf(bet)].AwayTeam" value="@bet.AwayTeam" />
						<input type="hidden" name="Bets[@Model.Bets.IndexOf(bet)].StartTimeUtc" value="@bet.StartTimeUtc" />
					</div>
				}
			}
		</div>

		<div class="p-3 d-flex flex-column justify-content-center align-items-center">
			<div id="amountContainer">
				<div class="d-flex justify-content-center align-items-center gap-2">
					<button type="button" class="btn btn-primary btn-sm step-btn flex-shrink-0" onclick="changeBetAmount(this, -1)">−</button>

					<div class="position-relative" style="width: 90px;">
						<span class="position-absolute top-50 start-0 translate-middle-y ps-2">€</span>
						<input type="number" id="betAmount" name="Amount" class="form-control ps-4" min="1" value="1" required oninput="updatePotentialReturn()" />
					</div>

					<button type="button" class="btn btn-primary btn-sm step-btn flex-shrink-0" onclick="changeBetAmount(this, 1)">+</button>
				</div>
			</div>

			<div id="potentialReturnOddsContainer" class="d-flex justify-content-center align-items-center mb-3 mt-2">
				<div class="me-4" id="potentialReturnContainer">To Win: <strong>€</strong><strong id="potentialReturn">0.00</strong></div>

				<div>
					<i class="bi bi-lightning-charge-fill lightning-icon-all-odds"></i><strong id="totalOdds">0.00</strong><strong style="text-shadow: 0px 1px 1px white;">x</strong>
				</div>
			</div>

			<button type="submit" class="btn btn-success w-100">Submit slip</button>
		</div>
	</div>
</form>

			
<script>
	document.addEventListener('DOMContentLoaded', () => {
		setInterval(checkForOddsChanges, 3000);
	});

	async function checkForOddsChanges() {
		const betItems = document.querySelectorAll('.bet-item');
		const matchIds = [...betItems].map(item => item.dataset.matchId);

		if (!matchIds.length) return;

		try {
			const res = await fetch('/Event/GetLatestOdds', {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
					'RequestVerificationToken': getCsrfToken()
				},
				body: JSON.stringify(matchIds)
			});

			const latestOdds = await res.json();

			betItems.forEach(item => {
				const matchId = item.dataset.matchId;
				const selectedOption = item.querySelector('input[name*=".SelectedOption"]').value;
				const currentOddsEl = item.querySelector('#odds-multiplier');
				const hiddenOddsInput = item.querySelector('input[name*=".Odds"]');

				if (!latestOdds[matchId]) return;

				const oddsData = latestOdds[matchId];
				const hasBoost = oddsData.HasActiveBoost;

				// Determine which odds to use
				let newOdds;
				switch (selectedOption) {
					case 'Home':
						newOdds = hasBoost && oddsData.EffectiveHomeOdds != null ? oddsData.EffectiveHomeOdds : oddsData.HomeOdds;
						break;
					case 'Draw':
						newOdds = hasBoost && oddsData.EffectiveDrawOdds != null ? oddsData.EffectiveDrawOdds : oddsData.DrawOdds;
						break;
					case 'Away':
						newOdds = hasBoost && oddsData.EffectiveAwayOdds != null ? oddsData.EffectiveAwayOdds : oddsData.AwayOdds;
						break;
				}

				newOdds = parseFloat(newOdds);
				const oldOdds = parseFloat(hiddenOddsInput.value);

				if (isNaN(newOdds) || oldOdds === newOdds) return;

				// Highlight change
				highlightOddsChange(item, oldOdds, newOdds);

				// Update visible odds
				const oddsLabel = currentOddsEl.querySelector('strong');
				if (oddsLabel) oddsLabel.textContent = newOdds.toFixed(2) + 'x';

				// Update hidden input
				hiddenOddsInput.value = newOdds.toFixed(2);

				// Update the session safely
				addBetToSession({
					matchId: matchId,
					homeTeam: item.querySelector('input[name*=".HomeTeam"]').value,
					awayTeam: item.querySelector('input[name*=".AwayTeam"]').value,
					homeLogoUrl: item.dataset.homeLogoUrl || '',
					awayLogoUrl: item.dataset.awayLogoUrl || '',
					option: selectedOption,
					odds: newOdds,
					startUtc: item.dataset.startUtc 
				});
			});

			updateTotalOddsAndReturn();

		} catch (err) {
			console.error('Failed to fetch latest odds', err);
		}
	}



	function highlightOddsChange(item, oldOdds, newOdds) {
		const badge = item.querySelector('.odds-change-badge');

		const matchId = item.dataset.matchId;
		const option = item.dataset.option;
		const isUp = newOdds > oldOdds;

		localStorage.setItem(`oddsDir_${matchId}_${option}`, isUp ? 'up' : 'down');

		renderArrow(badge, isUp);
	}

	function renderArrow(badge, isUp) {
		badge.textContent = isUp ? '↑' : '↓';
		badge.className = `animate__animated animate__slower badge odds-change-badge ${isUp ? 'up animate__fadeInUp' : 'down animate__fadeInDown'}`;
	}

	function getCsrfToken() {
		return document.querySelector('input[name="__RequestVerificationToken"]').value;
	}

	function updateTotalOddsAndReturn() {
		let totalOdds = 1;
		document.querySelectorAll('.bet-item input[name*=".Odds"]').forEach(inp => {
			totalOdds *= parseFloat(inp.value);
		});
		document.getElementById('totalOdds').innerText = totalOdds.toFixed(2);
		updatePotentialReturn();
	}
	

</script>
