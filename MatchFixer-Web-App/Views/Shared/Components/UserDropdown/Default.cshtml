@using MatchFixer.Core.ViewModels.Profile;
@model UserDropdownViewModel


<ul class="profile-dropdown-menu d-none d-lg-flex">
	@if (User.Identity.IsAuthenticated)
	{
        <li id="betSlipButtonContainer" class="nav-item position-relative">
			<button id="betSlipToggle" class="btn position-relative">
				<img src="/images/bet-slip/bets.png" alt="Bet Slip" style="height: 40px;">
				<span id="betCountBadge" class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger" style="display: none;">
					0
				</span>
			</button>
		</li>
	}
	<li class="nav-item dropdown pe-3 position-relative hover-dropdown-container">

		<a class="nav-link nav-profile d-flex align-items-center pe-0 hover-dropdown" href="#">
			<img src="@Model.ProfileImageUrl" alt="User Image" class="rounded-circle">
			<span class="d-none d-md-block dropdown ps-2"></span>
		</a>

		<ul class="dropdown-menu dropdown-menu-end profile">

			<li class="dropdown-header">
				<h6 class="d-flex align-items-center justify-content-center">@Model.FullName</h6>
			</li>
			<li>
				<hr class="dropdown-divider">
			</li>

			<li>

				<form method="get" asp-area="" asp-controller="Profile" asp-action="Profile">
					<input type="hidden" name="userId" value="@Model.Id"/>
					<button type="submit" class="dropdown-item d-flex  align-items-center justify-content-center">
						<span><i class="bi bi-person"></i> Your Profile</span>
					</button>
				</form>
			</li>
			<li>
				<hr class="dropdown-divider">
			</li>

			<li>
				<form method="get" action="@Url.Action("Privacy", "Home")">
					<button type="submit" class="dropdown-item d-flex align-items-center justify-content-center">
						<span><i class="bi bi-info-circle"></i> Privacy Policy</span>
					</button>
				</form>
			</li>
			<li>
				<hr class="dropdown-divider">
			</li>

			<li>
				<form class="form-inline" asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="@Url.Action("Index", "Home", new { area = "" })">
					<button type="submit" class="dropdown-item d-flex align-items-center justify-content-center">

						<span><i class="bi bi-box-arrow-right"></i> Sign Out</span>
					</button>
				</form>
			</li>



		</ul><!-- End Profile Dropdown Items -->
	</li><!-- End Profile Nav -->
</ul>

<script>
	const betSlipBadge = document.getElementById('betCountBadge');

	document.addEventListener('DOMContentLoaded', function () {
		const toggleBtn = document.getElementById('betSlipToggle');
		const closeBtn = document.getElementById('closeBetSlip');
		const panel = document.getElementById('betSlipPanel');

		toggleBtn?.addEventListener('click', function () {
			panel.classList.toggle('open');
			this.blur();
		});

		closeBtn?.addEventListener('click', function () {
			panel.classList.remove('open');
		});

		document.querySelectorAll(".bet-trigger").forEach(el => {
			el.addEventListener("click", () => {
				const matchId = el.dataset.matchId;
				const home = el.dataset.home;
				const away = el.dataset.away;
				const homeLogoUrl = el.dataset.homeLogoUrl; // Get home logo URL
				const awayLogoUrl = el.dataset.awayLogoUrl; // Get away logo URL
				const option = el.dataset.option;
				const odds = parseFloat(el.dataset.odds);

				if (matchId && home && away && homeLogoUrl && awayLogoUrl && option && !isNaN(odds)) {
					addToBetSlip(matchId, home, away, homeLogoUrl, awayLogoUrl, option, odds);

					if (betSlipBadge) {
						betSlipBadge.textContent = betSlip.bets.length.toString();
						betSlipBadge.style.display = betSlip.bets.length > 0 ? "inline-block" : "none";
					}

				}
			});
		});

	});

	const betSlip = {
		bets: [],
		amount: 0
	};

	function openBetSlip() {
		const panel = document.getElementById("betSlipPanel");
		panel?.classList.add("open");
		panel?.classList.remove("d-none");
	}

	function closeBetSlip() {
		const panel = document.getElementById("betSlipPanel");
		panel?.classList.remove("open");
		panel?.classList.add("d-none");
	}

	function addToBetSlip(matchId, homeTeam, awayTeam, homeLogoUrl, awayLogoUrl, option, odds) {
		const existing = betSlip.bets.find(b => b.matchId === matchId);
		if (existing) {
			existing.selectedOption = option;
			existing.odds = odds;
			existing.homeLogoUrl = homeLogoUrl; 
			existing.awayLogoUrl = awayLogoUrl; 
		} else {
			betSlip.bets.push({ matchId, homeTeam, awayTeam, homeLogoUrl, awayLogoUrl, selectedOption: option, odds });
		}
		renderBetSlip();
		openBetSlip();
	}

	function renderBetSlip() {
		const container = document.getElementById("betSlipContent");
		container.innerHTML = "";

		if (betSlip.bets.length === 0) {
			const p = document.createElement("p");
			p.classList.add("text-muted");
			p.textContent = "No bets placed yet.";
			container.appendChild(p);

			document.getElementById("totalOdds").innerText = "0.00";
			document.getElementById("potentialReturn").innerText = "0.00";
			return;
		}

		let totalOdds = 1;

		betSlip.bets.forEach((bet, index) => {
			totalOdds *= bet.odds;

			const item = document.createElement("div");
			item.classList.add("border", "rounded", "p-2", "mb-2");

			const wrapper = document.createElement("div");
			wrapper.classList.add("d-flex", "justify-content-between", "align-items-center");
			wrapper.style.marginTop = "0.2em";


			const left = document.createElement("div");

			left.classList.add("flex-grow", "align-items-center"); // Allow left content to grow

			// Team Logos 
			const teamsDiv = document.createElement("div");
			teamsDiv.classList.add("flex", "items-center", "mb-2", "text-white");

			const homeLogo = document.createElement("img");
			homeLogo.src = bet.homeLogoUrl;
			homeLogo.alt = `${bet.homeTeam} Logo`;
			homeLogo.classList.add("rounded-full", "mr-4", "object-cover"); // Team logo styling
			homeLogo.style.width = "50px";
			homeLogo.style.height = "auto";
			homeLogo.style.marginLeft = "0.2em";


			const versus = document.createElement("img");
			versus.src = "/images/live-events/versus.png";
			versus.alt = `VS`;
			versus.style.width = "auto";
			versus.style.height = "25px";
			versus.style.margin = "1em";
			versus.classList.add("img-fluid", "mb-2");

			const awayLogo = document.createElement("img");
			awayLogo.src = bet.awayLogoUrl;
			awayLogo.alt = `${bet.awayTeam} Logo`;
			awayLogo.classList.add("rounded-full", "ml-2", "object-cover"); // Team logo styling
			awayLogo.style.width = "50px";
			awayLogo.style.height = "auto";

			teamsDiv.appendChild(homeLogo);
			teamsDiv.appendChild(versus);
			teamsDiv.appendChild(awayLogo);

			const br = document.createElement("br");
			const pick = document.createElement("span");
			pick.classList.add("text-primary");
			pick.textContent = bet.selectedOption;

			const pickText = document.createElement('p');
			pickText.textContent = "Pick:";
			pickText.classList.add("text-center");
			pickText.style.marginBottom = "0em";
			left.appendChild(teamsDiv);
			left.appendChild(br);

			const pickContainer = document.createElement("div");
			pickContainer.classList.add("flex", "items-center");
			pickContainer.appendChild(pickText);
			pickContainer.appendChild(pick);
			pickContainer.style.marginTop = "-1.2em";

			const right = document.createElement("div");
			right.classList.add("text-end");

			const oddsLabel = document.createElement("strong");
			oddsLabel.textContent = bet.odds.toFixed(2);

			const removeBtn = document.createElement("button");
			removeBtn.type = "button";
			removeBtn.classList.add("btn", "btn-sm", "btn-outline-danger", "mt-1");
			removeBtn.textContent = "Remove";
			removeBtn.addEventListener("click", () => removeBet(bet.matchId));

			right.appendChild(document.createTextNode("Odds: "));
			right.appendChild(oddsLabel);
			right.appendChild(document.createElement("br"));
			right.appendChild(removeBtn);

			wrapper.appendChild(left);
			wrapper.appendChild(right);
			item.appendChild(wrapper);
			item.appendChild(pickContainer);

			const hiddenInputs = document.createElement("div");

			const input1 = document.createElement("input");
			input1.type = "hidden";
			input1.name = `Bets[${index}].MatchId`;
			input1.value = bet.matchId;

			const input2 = document.createElement("input");
			input2.type = "hidden";
			input2.name = `Bets[${index}].SelectedOption`;
			input2.value = bet.selectedOption;

			const input3 = document.createElement("input");
			input3.type = "hidden";
			input3.name = `Bets[${index}].Odds`;
			input3.value = bet.odds;

			hiddenInputs.appendChild(input1);
			hiddenInputs.appendChild(input2);
			hiddenInputs.appendChild(input3);
			item.appendChild(hiddenInputs);

			container.appendChild(item);
		});

		document.getElementById("totalOdds").innerText = totalOdds.toFixed(2);
		updatePotentialReturn();
	}

	function removeBet(matchId) {
		betSlip.bets = betSlip.bets.filter(b => b.matchId !== matchId);

		if (betSlipBadge) {
			betSlipBadge.textContent = betSlip.bets.length.toString();
			betSlipBadge.style.display = betSlip.bets.length > 0 ? "inline-block" : "none";
		}
		
		renderBetSlip();
	}

	function updatePotentialReturn() {
		const amount = parseFloat(document.getElementById("betAmount").value || "0");
		const totalOdds = parseFloat(document.getElementById("totalOdds").innerText || "0");
		const potential = (amount * totalOdds).toFixed(2);
		document.getElementById("potentialReturn").innerText = potential;
	}

	document.getElementById("closeBetSlip")?.addEventListener("click", closeBetSlip);
</script>







