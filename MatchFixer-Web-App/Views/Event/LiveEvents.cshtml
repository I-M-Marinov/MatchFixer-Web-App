@using MatchFixer.Core.ViewModels.LiveEvents
@model IEnumerable<LiveEventViewModel>

@{
    ViewData["Title"] = "Live Match Events";
}

<div class="tw-h-100" style="overflow-y: visible; overflow-x: visible;">
	<div class="border-0 rounded-4 p-4 flex-fill">
		@if (TempData["SuccessMessage"] != null)
		{
			<div class="alert success-message" id="success-message">
				@TempData["SuccessMessage"]
			</div>
		}

		@if (TempData["ErrorMessage"] != null)
		{
			<div class="alert error-message" id="error-message">
				@TempData["ErrorMessage"]
			</div>
		}

	</div>
	
	@await Html.PartialAsync("_WikipediaTooltipPartial")

	<div class="container mt-4">

		<div class="game-background">
		</div>


		<div class="d-flex flex-column align-items-center gap-3 mb-4 position-relative">

			<div class="w-100 d-flex justify-content-center">
				<div class="input-group" style="max-width: 400px;">
					<span class="input-group-text bg-white border-end-0">
						<i class="bi bi-search"></i> 
					</span>
					<input type="text" id="matchSearch" class="form-control border-start-0" placeholder="Search team name..." />
				</div>
			</div>

			<div id="datePillContainer" class="d-flex flex-wrap justify-content-center gap-2 position-relative" style="z-index: 1;">
			</div>

		</div>

		



		@if (!Model.Any())
		{
			<div class="alert alert-info text-center">
				No match events available at the moment.
			</div>
		}
		else
		{
			<div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4 d-flex align-items-stretch">
				@foreach (var match in Model)
				{
					<div class="col">
						<div class="event-card position-relative" data-kickoff="@match.KickoffTime.ToString("o")" data-user-tz="@match.UserTimeZone">

							<div class="live-event-card tw-card tw-shadow-sm tw-h-100 gap-2">
								<div class="card-body d-flex flex-column justify-content-around" style="postion: relative; object-fit: contain;">
									<div id="oneVsOneContainer">
										@if (match.IsDerby)
										{
											<span class="derby-match-tooltip-wrapper">
												<img class="animate__animated animate__heartBeat animate__slower animate__infinite" id="derby-match-icon" src="/images/live-events/derby-match.png" alt="derby match" style="width: auto; height: 40px;" class="img-fluid mb-2"/>
												<span class="derby-match-tooltip">Derby Match
												</span>
											</span>

										}
									</div>
									<div class="d-flex justify-content-around align-items-center mb-2 mt-2 @(match.IsDerby ? "derby-negative-margin" : "")">



										<div class="tw-flex tw-justify-around tw-items-center mb-2 gap-4">
											<div class="text-center">
												<div class="tw-flex  tw-flex-col  tw-items-center  tw-justify-center">
													<img src="@match.HomeTeamLogoUrl" alt="@match.HomeTeam" style="width: auto; height: 60px;" class="mb-2 team-logo hoverable-logo" data-team-name="@match.HomeTeam"/>
													<div class="event-team-name">@match.HomeTeam</div>
												</div>
											</div>


											<img src="/images/live-events/versus.png" alt="@match.HomeTeam" style="width: auto; height: 40px;" class="img-fluid mb-2"/>

											<div class="text-center">
												<div class="flex flex-col items-center justify-center object-fit-contain">
													<img src="@match.AwayTeamLogoUrl" alt="@match.AwayTeam" style="width: auto; height: 60px;" class="mb-2 team-logo hoverable-logo" data-team-name="@match.AwayTeam"/>
													<div class="event-team-name">@match.AwayTeam</div>
												</div>
											</div>
										</div>
									</div>
									<p id="event-date-time" class="tw-card-text text-brand-oxford-blue text-center text-muted mb-2 animate__animated animate__heartBeat">
										@* @match.KickoffTime.ToString("f") *@
									</p>

									<div class="d-flex justify-content-around mb-3">

										<div class="tw-overflow-x-auto">
											<table class="odds-table tw-min-w-full tw-bg-white tw-rounded-lg tw-overflow-hidden">
												<thead class="tw-bg-gray-50 tw-shadow">
												<tr>
													<th id="home-header" class="tw-px-4 tw-py-3 tw-text-center tw-text-xs tw-font-medium tw-text-gray-600 bet-trigger" data-column-index="0"
													    data-match-id="@match.Id"
													    data-home="@match.HomeTeam"
													    data-away="@match.AwayTeam"
													    data-home-logo-url="@match.HomeTeamLogoUrl"
													    data-away-logo-url="@match.AwayTeamLogoUrl"
													    data-option="Home"
													    data-odds="@match.HomeWinOdds"
													    data-start-time="@match.KickoffTime.ToString("o")">

														<button class="bet-option">
															Home
														</button>
													</th>
													<th id="draw-header" class="tw-px-4 tw-py-3 tw-text-center tw-text-xs tw-font-medium tw-text-gray-600 bet-trigger" data-column-index="1"
													    data-match-id="@match.Id"
													    data-home="@match.HomeTeam"
													    data-away="@match.AwayTeam"
													    data-home-logo-url="@match.HomeTeamLogoUrl"
													    data-away-logo-url="@match.AwayTeamLogoUrl"
													    data-option="Draw"
													    data-odds="@match.DrawOdds" 
													    data-start-time="@match.KickoffTime.ToString("o")">

														<button class="bet-option">
															Draw
														</button>
													</th>
													<th id="away-header" class="tw-px-4 tw-py-3 tw-text-center tw-text-xs tw-font-medium tw-text-gray-600 bet-trigger" data-column-index="2"
													    data-match-id="@match.Id"
													    data-home="@match.HomeTeam"
													    data-away="@match.AwayTeam"
													    data-home-logo-url="@match.HomeTeamLogoUrl"
													    data-away-logo-url="@match.AwayTeamLogoUrl"
													    data-option="Away"
													    data-odds="@match.AwayWinOdds"
													    data-start-time="@match.KickoffTime.ToString("o")">
													    
														<button class="bet-option">
															Away
														</button>
													</th>
												</tr>
												</thead>
												<tbody class="tw-divide-y tw-divide-gray-200">
												<tr>
													<td class="tw-px-4 tw-py-4 tw-whitespace-nowrap tw-text-center bet-trigger">
														<span class="badge pill-brand-blue tw-inline-flex tw-items-center tw-px-3 tw-py-1.5 tw-rounded-full tw-text-xs tw-font-semibold"
														      data-match-id="@match.Id"
														      data-home="@match.HomeTeam"
														      data-away="@match.AwayTeam"
														      data-home-logo-url="@match.HomeTeamLogoUrl"
														      data-away-logo-url="@match.AwayTeamLogoUrl"
														      data-option="Home"
														      data-odds="@match.HomeWinOdds">
															@match.HomeWinOdds
														</span>
													</td>
													<td class="tw-px-4 tw-py-4 tw-whitespace-nowrap tw-text-center bet-trigger">
														<span class="badge pill-brand-yellow tw-inline-flex tw-items-center tw-px-3 tw-py-1.5 tw-rounded-full tw-text-xs tw-font-semibold"
														      data-match-id="@match.Id"
														      data-home="@match.HomeTeam"
														      data-away="@match.AwayTeam"
														      data-home-logo-url="@match.HomeTeamLogoUrl"
														      data-away-logo-url="@match.AwayTeamLogoUrl"
														      data-option="Draw"
														      data-odds="@match.DrawOdds">
															@match.DrawOdds
														</span>
													</td>
													<td class="tw-px-4 tw-py-4 tw-whitespace-nowrap tw-text-center bet-trigger">
														<span class="badge pill-brand-green tw-inline-flex tw-items-center tw-px-3 tw-py-1.5 tw-rounded-full tw-text-xs tw-font-semibold"
														      data-match-id="@match.Id"
														      data-home="@match.HomeTeam"
														      data-away="@match.AwayTeam"
														      data-home-logo-url="@match.HomeTeamLogoUrl"
														      data-away-logo-url="@match.AwayTeamLogoUrl"
														      data-option="Away"
														      data-odds="@match.AwayWinOdds">
															@match.AwayWinOdds
														</span>
													</td>
												</tr>
												</tbody>
											</table>
										</div>
									</div>
									<!-- Event content -->
									<div id="event-countdown" class="countdown text-danger fw-bold d-flex justify-content-center align-items-center"></div>
								</div>

								<!-- Hidden mask shown on match start -->
								<div class="event-mask d-none">
									<div class="mask-content text-center animate__animated animate__flipInY">
										<p>This event already started !</p>
									</div>								
								</div>
							</div>
						</div>
					</div>
				}
			</div>
		}
	</div>
</div>

<script>
		
	document.addEventListener('DOMContentLoaded', function() {

		// Select all table headers from all odds-tables
		const allTableHeaders = document.querySelectorAll('.odds-table th');

		allTableHeaders.forEach(header => {
			header.addEventListener('mouseover', function() {

				// Get the parent table of the hovered header
				const parentTable = this.closest('.odds-table');
				if (!parentTable) return; 

				const headersInThisTable = parentTable.querySelectorAll('th');
				const columnIndex = Array.from(headersInThisTable).indexOf(this);

				if (columnIndex === -1) return;

				this.classList.add('highlighted-column');

				const rowsInThisTable = parentTable.querySelectorAll('tbody tr');

				rowsInThisTable.forEach(row => {
					const cells = row.querySelectorAll('td');
					if (cells[columnIndex]) {
						cells[columnIndex].classList.add('highlighted-column');
					}
				});
			});

			header.addEventListener('mouseout', function() {

				const parentTable = this.closest('.odds-table');
				if (!parentTable) return;

				const headersInThisTable = parentTable.querySelectorAll('th');
				const columnIndex = Array.from(headersInThisTable).indexOf(this);

				if (columnIndex === -1) return;

				this.classList.remove('highlighted-column');

				const rowsInThisTable = parentTable.querySelectorAll('tbody tr');

				rowsInThisTable.forEach(row => {
					const cells = row.querySelectorAll('td');
					if (cells[columnIndex]) {
						cells[columnIndex].classList.remove('highlighted-column');
					}
				});
			});
		});
	});


		document.querySelectorAll('.event-card').forEach(card => {
		const userTimeZone = card.dataset.userTz;

		const kickoffDate = new Date(card.dataset.kickoff); // ******************** / UTC / ********************

		const formatter = new Intl.DateTimeFormat(undefined, {
			weekday: 'short',
			year: 'numeric',
			month: 'short',
			day: 'numeric',
			hour: '2-digit',
			minute: '2-digit',
			hour12: true,
			timeZone: userTimeZone
		});

		const formattedDate = formatter.format(kickoffDate);
		const dateEl = card.querySelector('#event-date-time');
		if (dateEl) {
			dateEl.textContent = formattedDate;
		}
	});

		function updateEventClocks() {
		document.querySelectorAll('.event-card').forEach(card => {
			const kickoffStr = card.dataset.kickoff;
			const kickoffTime = new Date(kickoffStr); // UTC datetime
			const now = new Date(); // also in UTC (local browser time, but same reference)

			const timeDiffMs = kickoffTime.getTime() - now.getTime();

			const countdownEl = card.querySelector('.countdown');
			const mask = card.querySelector('.event-mask');
			const oddsTable = card.querySelector('.odds-table');

			if (timeDiffMs <= 0) {
				countdownEl.classList.add('d-none');
				countdownEl.textContent = '';
				mask.classList.remove('d-none');
				if (oddsTable) oddsTable.classList.add('d-none');
			} else if (timeDiffMs <= 60 * 60 * 1000) {
				const mins = Math.floor(timeDiffMs / 1000 / 60);
				const secs = Math.floor((timeDiffMs / 1000) % 60);
				countdownEl.classList.remove('d-none');
				countdownEl.textContent = `Starts in ${mins}m ${secs}s`;
			} else {
				countdownEl.classList.add('d-none');
				countdownEl.textContent = '';
			}
		});
	}

	updateEventClocks();
	setInterval(updateEventClocks, 1000);

	document.querySelectorAll('.mask-content').forEach(el => {
		el.addEventListener('animationend', () => {
			el.classList.add('mask-rotated');
		});
	});

	function filterMatches() {
		const searchQuery = document.getElementById('matchSearch').value.toLowerCase();

		document.querySelectorAll('.event-card').forEach(card => {
			const home = card.querySelector('[data-team-name]').dataset.teamName.toLowerCase();
			const away = card.querySelectorAll('[data-team-name]')[1].dataset.teamName.toLowerCase();

			const matchesSearch = home.includes(searchQuery) || away.includes(searchQuery);

			card.closest('.col').style.display = matchesSearch ? '' : 'none';
		});
	}

	function getUniqueEventDates() {
		const dateSet = new Set();

		document.querySelectorAll('.event-card').forEach(card => {
			const kickoff = new Date(card.dataset.kickoff);
			const dateStr = kickoff.toISOString().split('T')[0]; // format: YYYY-MM-DD
			dateSet.add(dateStr);
		});

		return Array.from(dateSet).sort();
	}


	document.getElementById('matchSearch').addEventListener('input', filterMatches);

	function renderDatePills() {
		const container = document.getElementById('datePillContainer');
		container.innerHTML = '';

		const allBtn = document.createElement('button');
		allBtn.textContent = 'All';
		allBtn.className = 'custom-date-pill me-2 active';
		allBtn.dataset.date = 'all';
		container.appendChild(allBtn);

		getUniqueEventDates().forEach(date => {
			const btn = document.createElement('button');
			const dateObj = new Date(date);
			const displayText = formatDisplayDate(dateObj); // Jul 24th Thu

			btn.textContent = displayText;
			btn.className = 'custom-date-pill me-2';
			btn.dataset.date = date;
			container.appendChild(btn);
		});
	}

	function getOrdinalSuffix(day) {
		const j = day % 10, k = day % 100;
		if (j === 1 && k !== 11) return day + "st";
		if (j === 2 && k !== 12) return day + "nd";
		if (j === 3 && k !== 13) return day + "rd";
		return day + "th";
	}

	function formatDisplayDate(dateObj) {
		const month = dateObj.toLocaleString(undefined, { month: 'short' }); // "Aug"
		const weekday = dateObj.toLocaleString(undefined, { weekday: 'short' }); // "Sat"
		const day = getOrdinalSuffix(dateObj.getDate()); // "30th"
		return `${month} ${day} ${weekday}`; // "Aug 30th Sat"
	}

	document.addEventListener('click', function (e) {
		if (e.target.matches('#datePillContainer button')) {
			const selectedDate = e.target.dataset.date;

			document.querySelectorAll('#datePillContainer button').forEach(btn =>
				btn.classList.remove('active'));
			e.target.classList.add('active');

			document.querySelectorAll('.event-card').forEach(card => {
				const kickoffDate = card.dataset.kickoff.split('T')[0];
				const matches = (selectedDate === 'all') || (kickoffDate === selectedDate);
				card.closest('.col').style.display = matches ? '' : 'none';
			});
		}
	});

	document.addEventListener('DOMContentLoaded', () => {
		renderDatePills();
	});

</script>
