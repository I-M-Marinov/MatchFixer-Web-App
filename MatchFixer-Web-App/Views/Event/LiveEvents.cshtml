@using MatchFixer.Core.ViewModels.LiveEvents
@model IEnumerable<LiveEventViewModel>

@{
    ViewData["Title"] = "Live Match Events";
}

<div class="tw-h-100" style="overflow-y: visible; overflow-x: visible;">
	<div class="border-0 rounded-4 p-4 flex-fill">
		@if (TempData["SuccessMessage"] != null)
		{
			<div class="alert success-message" id="success-message">
				@TempData["SuccessMessage"]
			</div>
		}

		@if (TempData["ErrorMessage"] != null)
		{
			<div class="alert error-message" id="error-message">
				@TempData["ErrorMessage"]
			</div>
		}

	</div>
	
	@await Html.PartialAsync("_WikipediaTooltipPartial")

	<div class="container mt-4">

		<div class="game-background">
		</div>


		@if (!Model.Any())
		{
			<div class="alert alert-info text-center">
				No live match events available at the moment.
			</div>
		}
		else
		{
			<div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4 d-flex align-items-stretch">
				@foreach (var match in Model)
				{
					<div class="col">
						<div class="live-event-card tw-card tw-shadow-sm tw-h-100 gap-2">
							<div class="card-body d-flex flex-column justify-content-around" style="postion: relative; object-fit: contain;">
								<div id="oneVsOneContainer">
									@if (match.IsDerby)
									{
										<img class="animate__animated animate__heartBeat animate__slower animate__infinite" id="derby-match-icon" src="/images/live-events/derby-match.png" alt="derby match" style="width: auto; height: 40px;" class="img-fluid mb-2" />
									}
								</div>
								<div class="d-flex justify-content-around align-items-center mb-2 mt-2 @(match.IsDerby ? "derby-negative-margin" : "")">



									<div class="tw-flex tw-justify-around tw-items-center mb-2 gap-4">
										<div class="text-center">
											<div class="tw-flex  tw-flex-col  tw-items-center  tw-justify-center">
												<img src="@match.HomeTeamLogoUrl" alt="@match.HomeTeam" style="width: auto; height: 60px;" class="mb-2 team-logo hoverable-logo" data-team-name="@match.HomeTeam"/>
												<div class="event-team-name">@match.HomeTeam</div>
											</div>
										</div>


										<img src="/images/live-events/versus.png" alt="@match.HomeTeam" style="width: auto; height: 40px;" class="img-fluid mb-2"/>

										<div class="text-center">
											<div class="flex flex-col items-center justify-center object-fit-contain">
												<img src="@match.AwayTeamLogoUrl" alt="@match.AwayTeam" style="width: auto; height: 60px;" class="mb-2 team-logo hoverable-logo" data-team-name="@match.AwayTeam"/>
												<div class="event-team-name">@match.AwayTeam</div>
											</div>
										</div>
									</div>
								</div>
								<p id="event-date-time" class="tw-card-text text-brand-oxford-blue text-center text-muted mb-2 animate__animated animate__heartBeat">
									@match.KickoffTime.ToString("f")
								</p>

								<div class="d-flex justify-content-around mb-3">

									<div class="tw-overflow-x-auto">
										<table class="odds-table tw-min-w-full tw-bg-white tw-border tw-border-gray-200 tw-rounded-lg tw-overflow-hidden">
											<thead class="tw-bg-gray-50 tw-shadow">
											<tr>
												<th id="home-header" class="tw-px-4 tw-py-3 tw-text-center tw-text-xs tw-font-medium tw-text-gray-600" data-column-index="0">
													<button class="bet-option"
													        data-match-id="@match.Id"
													        data-home="@match.HomeTeam"
													        data-away="@match.AwayTeam"
													        data-option="Home"
													        data-odds="@match.HomeWinOdds">
														Home
													</button>
												</th>
												<th id="draw-header" class="tw-px-4 tw-py-3 tw-text-center tw-text-xs tw-font-medium tw-text-gray-600" data-column-index="1">
													<button class="bet-option"
													        data-match-id="@match.Id"
													        data-home="@match.HomeTeam"
													        data-away="@match.AwayTeam"
													        data-option="Home"
													        data-odds="@match.HomeWinOdds">
														Draw
													</button>	
												</th>
												<th id="away-header" class="tw-px-4 tw-py-3 tw-text-center tw-text-xs tw-font-medium tw-text-gray-600" data-column-index="2">
													<button class="bet-option"
															data-match-id="@match.Id"
															data-home="@match.HomeTeam"
															data-away="@match.AwayTeam"
															data-option="Home"
															data-odds="@match.HomeWinOdds">
														Away
													</button>
												</th>
											</tr>
											</thead>
											<tbody class="tw-divide-y tw-divide-gray-200">
											<tr>
												<td class="tw-px-4 tw-py-4 tw-whitespace-nowrap tw-text-center">
													<span class="badge pill-brand-blue tw-inline-flex tw-items-center tw-px-3 tw-py-1.5 tw-rounded-full tw-text-xs tw-font-semibold">
														@match.HomeWinOdds
													</span>
												</td>
												<td class="tw-px-4 tw-py-4 tw-whitespace-nowrap tw-text-center">
													<span class="badge pill-brand-yellow tw-inline-flex tw-items-center tw-px-3 tw-py-1.5 tw-rounded-full tw-text-xs tw-font-semibold">
														@match.DrawOdds
													</span>
												</td>
												<td class="tw-px-4 tw-py-4 tw-whitespace-nowrap tw-text-center">
													<span class="badge pill-brand-green tw-inline-flex tw-items-center tw-px-3 tw-py-1.5 tw-rounded-full tw-text-xs tw-font-semibold">
														@match.AwayWinOdds
													</span>
												</td>
											</tr>
											</tbody>
										</table>
									</div>
								</div>

							</div>
						</div>
					</div>
				}
			</div>
		}
	</div>
</div>

<script>
		
	document.addEventListener('DOMContentLoaded', function() {

		// Select all table headers from all odds-tables
		const allTableHeaders = document.querySelectorAll('.odds-table th');

		allTableHeaders.forEach(header => {
			header.addEventListener('mouseover', function() {

				// Get the parent table of the hovered header
				const parentTable = this.closest('.odds-table');
				if (!parentTable) return; 

				const headersInThisTable = parentTable.querySelectorAll('th');
				const columnIndex = Array.from(headersInThisTable).indexOf(this);

				if (columnIndex === -1) return;

				this.classList.add('highlighted-column');

				const rowsInThisTable = parentTable.querySelectorAll('tbody tr');

				rowsInThisTable.forEach(row => {
					const cells = row.querySelectorAll('td');
					if (cells[columnIndex]) {
						cells[columnIndex].classList.add('highlighted-column');
					}
				});
			});

			header.addEventListener('mouseout', function() {

				const parentTable = this.closest('.odds-table');
				if (!parentTable) return;

				const headersInThisTable = parentTable.querySelectorAll('th');
				const columnIndex = Array.from(headersInThisTable).indexOf(this);

				if (columnIndex === -1) return;

				this.classList.remove('highlighted-column');

				const rowsInThisTable = parentTable.querySelectorAll('tbody tr');

				rowsInThisTable.forEach(row => {
					const cells = row.querySelectorAll('td');
					if (cells[columnIndex]) {
						cells[columnIndex].classList.remove('highlighted-column');
					}
				});
			});
		});
	});
</script>
