@using System.Globalization
@model MatchFixer_Web_App.Areas.Admin.ViewModels.AdminDashboardViewModel

@{
	Layout = "/Areas/Admin/Views/Shared/_Layout.Admin.cshtml";
	ViewData["Title"] = "Admin Dashboard";

	var activePct = Model.TotalUsers == 0 ? 0 : (int)Math.Round((double)Model.ActiveUsers * 100 / Model.TotalUsers);
	var wonPct = Model.TotalBets == 0 ? 0 : (int)Math.Round((double)Model.WonBets * 100 / Model.TotalBets);
	var lostPct = Model.TotalBets == 0 ? 0 : (int)Math.Round((double)Model.LostBets * 100 / Model.TotalBets);
	var pendingPct = Model.TotalBets == 0 ? 0 : 100 - wonPct - lostPct;

	var inactivePct = Math.Clamp(100 - activePct, 0, 100);

}

<div class="border-0 rounded-4 p-4 flex-fill">
	@if (TempData["SuccessMessage"] != null)
	{
		<div class="alert success-message" id="success-message">
			@TempData["SuccessMessage"]
		</div>
	}

	@if (TempData["ErrorMessage"] != null)
	{
		<div class="alert error-message" id="error-message">
			@TempData["ErrorMessage"]
		</div>
	}

</div>

<div class="background-profile"></div>

<h1>Admin Dashboard</h1>

<div class="table-responsive">
	<table class="responsive-stack table table-bordered table-hover text-center shadow-sm rounded-3 table-sm align-middle">
		<thead class="table-dark">
		<tr>
			<th style="width: 220px;">Metric</th>
			<th>Main</th>
			<th>Details</th>
		</tr>
		</thead>
		<tbody>
		<!-- Users -->
		<tr>
			<td class="fw-bold">
				<i class="bi bi-people"></i> Users
			</td>
			<td>
				<span class="fs-5 fw-bold badge bg-primary-subtle mb-3" id="total-users-count">Total Users: @Model.TotalUsers</span>
				<div>
					<span class="badge bg-success">Active: @Model.ActiveUsers</span>
					<div class="d-flex justify-content-center gap-1 mt-2">
						<span class="badge bg-secondary">Inactive: @(Model.TotalUsers - Model.ActiveUsers)</span>
						<span class="badge bg-warning text-dark">Locked: @Model.LockedUsers</span>
						<span class="badge bg-black">Deleted: @Model.DeletedUsers</span>
						<span class="badge bg-danger">Banned: @Model.BannedUsers</span>
					</div>
				</div>
			</td>
			<td>
				<div class="d-inline-flex align-items-center gap-2">
					<div class="progress position-relative rounded-pill" style="width:260px; height:30px;">
						<!-- active segment -->
						<div class="progress-bar bg-success" style="width:@activePct%"></div>
						<!-- inactive segment (fills the rest) -->
						<div class="progress-bar bg-danger text-white" style="width:@inactivePct%"></div>

						<!-- overlay labels (sit on top of both bars) -->
						<div class="position-absolute top-50 start-0 translate-middle-y w-100 d-flex justify-content-between px-2"
						     style="pointer-events:none; font-size:.75rem;">
							<span class="text-white fw-bold">@activePct% active</span>
							<span class="text-white fw-bold">@inactivePct% inactive</span>
						</div>
					</div>
				</div>
			</td>
		</tr>

		<!-- Wallets / Transactions -->
		<tr>
			<td class="fw-bold">
				<i class="bi bi-wallet2"></i> Wallets &amp; Transactions
			</td>
			<td>
				<span class="fs-5 fw-semibold">€@Model.TotalWalletBalance</span>
				<div><span class="badge bg-info text-dark" style="width: 7em; margin: 0 auto;">Transactions: @Model.TotalTransactions</span></div>
			</td>
			<td class="text-muted">
				<small>Total wallet balance is a sum of all user wallets.</small>
			</td>
		</tr>

		<!-- Bets -->
		<tr>
			<td class="fw-bold">
				<i class="bi bi-bar-chart-line"></i> Bets
			</td>
			<td>
				<span class="fs-5 fw-semibold">@Model.TotalBets</span>
				<div class="mt-1 d-flex flex-wrap gap-1 justify-content-center">
					<span class="badge bg-warning text-dark">Pending: @Model.PendingBets</span>
					<span class="badge bg-success">Won: @Model.WonBets</span>
					<span class="badge bg-danger">Lost: @Model.LostBets</span>
				</div>
			</td>
			<td>
				<!-- tiny stacked bar -->
				<div class="mini-stacked d-inline-flex align-items-center">
					<div class="stack">
						<div class="seg seg-pending" style="width:@pendingPct%">
							<small>@pendingPct% pending</small>
						</div>
						<div class="seg seg-won" style="width:@wonPct%">
							<small>@wonPct% won</small>
						</div>
						<div class="seg seg-lost" style="width:@lostPct%">
							<small>@lostPct% lost</small>
						</div>
					</div>
					
				</div>
			</td>
		</tr>
		</tbody>
	</table>
</div>

@{
	var ev = Model.Events;
	var denom = ev.TotalEvents == 0 ? 1 : ev.TotalEvents;
	var upPct   = (int)Math.Round(ev.Upcoming * 100.0 / denom);
	var livePct = (int)Math.Round(ev.Live     * 100.0 / denom);
	var finPct  = (int)Math.Round(ev.Finished * 100.0 / denom);

	// ensure they sum to 100 (fix rounding drift)
	var sum = upPct + livePct + finPct;
	if (sum != 100)
	{
		var diff = 100 - sum;
		// add remainder to the largest slice (stable look)
		if (finPct >= livePct && finPct >= upPct) finPct += diff;
		else if (livePct >= upPct)                livePct += diff;
		else                                      upPct += diff;
	}

	bool showUp   = upPct   >= 12;  // hide labels if slice too narrow
	bool showLive = livePct >= 12;
	bool showFin  = finPct  >= 12;
}

<div class="mt-4 card shadow-sm border-0 rounded-3">
    <div class="card-body">
        <h5 class="card-title mb-3"><i class="bi bi-calendar2-event me-1"></i> Match Events</h5>

        <div class="row g-3 align-items-center mb-3">
            <div class="col-md-3">
                <div class="p-3 rounded bg-light text-center">
                    <div class="small text-muted">Total</div>
                    <div class="fs-5 fw-semibold">@ev.TotalEvents</div>
                    <div class="small text-muted">
	                    Today:
	                    <span class="@(ev.Today == 0 ? "text-danger" : "text-primary")">
		                    @ev.Today
	                    </span>
	                    · Last 7d: 
	                    <span class="@(ev.Last7Days == 0 ? "text-danger" : "text-primary")">
		                    @ev.Last7Days
	                    </span>
                    </div>          
                </div>
            </div>

            <div class="col-md-6">
	            <div class="mini-stacked d-inline-flex align-items-center w-100">
		            <div class="stack">
			            <div class="seg" style="width:@upPct%; background:#0d6efd;">
				            @if (showUp) { <small>@upPct% upcoming</small> }
			            </div>
			            <div class="seg" style="width:@livePct%; background:#ffc107;">
				            @if (showLive) { <small>@livePct% live</small> }
			            </div>
			            <div class="seg" style="width:@finPct%; background:#198754;">
				            @if (showFin) { <small>@finPct% finished</small> }
			            </div>
		            </div>
	            </div>
            </div>

            <div class="col-md-3 text-center">
                <div class="d-flex flex-wrap gap-2 justify-content-center">
                    @if (ev.Canceled > 0)
                    {
                        <span class="badge bg-danger">Canceled: @ev.Canceled</span>
                    }
                    @if (ev.Postponed > 0)
                    {
                        <span class="badge bg-secondary">Postponed: @ev.Postponed</span>
                    }
                    @if (ev.EventsWithVoidedBets > 0)
                    {
                        <span class="badge bg-dark">Voided bets on: @ev.EventsWithVoidedBets</span>
                    }
                </div>
            </div>
        </div>

        <div class="table-responsive">
            <table class="table table-sm table-hover align-middle mb-0">
                <thead class="table-light">
                    <tr>
                        <th style="min-width: 18ch;">Match (UTC)</th>
                        <th>Teams</th>
                        <th>Status</th>
                        <th class="text-nowrap">Updated (UTC)</th>
                    </tr>
                </thead>
                <tbody>
                    @if (ev.RecentUpdated.Count == 0)
                    {
                        <tr><td colspan="4" class="text-muted">No recent updates.</td></tr>
                    }
                    else
                    {
                        foreach (var r in ev.RecentUpdated)
                        {
	                        <tr>
								@{
									var matchStartUtc = r.MatchUtc.ToString("dd.MM.yyyy HH:mm", CultureInfo.InvariantCulture);
								}
								

								<td>@matchStartUtc</td>
		                        <td>
			                        <div class="fw-semibold">@r.HomeTeam</div>
			                        <div class="text-muted small">vs @r.AwayTeam
				                        @if (!string.IsNullOrWhiteSpace(r.League))
				                        {
					                        <span>· @r.League</span>
				                        }
			                        </div>
		                        </td>
		                        <td>
			                        @{
				                        var badge = r.Status switch
				                        {
					                        "Finished" => "bg-success",
					                        "Live" => "bg-warning text-dark",
					                        "Upcoming" => "bg-primary",
					                        "Cancelled" => "bg-danger",
					                        "Postponed" => "bg-secondary",
					                        _ => "bg-light text-dark"
				                        };
			                        }
			                        <span class="badge @badge">@r.Status</span>
		                        </td>
								<td class="text-nowrap">@((r.UpdatedUtc ?? r.MatchUtc).ToString("dd.MM.yyyy HH:mm", CultureInfo.InvariantCulture))</td>
	                        </tr>
                    }
                                        }
                </tbody>
            </table>
        </div>
    </div>
</div>


<style>
    .responsive-stack td, .responsive-stack th {
        vertical-align: middle;
    }

    .mini-stacked .stack {
        width: 240px;
        height: 10px;
        border-radius: 6px;
        overflow: hidden;
        display: inline-flex;
        background: #e9ecef;
        box-shadow: inset 0 0 0 1px rgba(0,0,0,.05);
    }

    .mini-stacked .seg {
        height: 100%;
    }

    .mini-stacked .seg-pending {
        background: #ffd966;
    }
    .mini-stacked .seg-won {
        background: #5cb85c;
    }
    .mini-stacked .seg-lost {
        background: #dc3545;
    }

    .mini-stacked .stack {
        display: flex;
        width: 100%;
        height: 22px; /* taller so text fits */
        border-radius: 12px;
        overflow: hidden;
        background: #e9ecef;
        box-shadow: inset 0 0 0 1px rgba(0,0,0,.05);
    }

    .mini-stacked .seg {
        position: relative;
        height: 100%;
        flex: 0 0 auto; /* width comes from style="width:..%" */
    }

    .mini-stacked .seg small {
        position: absolute;
        left: 50%;
        top: 50%;
        transform: translate(-50%,-50%);
        color: #000; /* dark text on light bg; adjust per color */
        font-size: 12px;
        line-height: 1;
        white-space: nowrap;
        pointer-events: none;
        text-shadow: 0 1px 2px rgba(255,255,255,.6);
    }
</style>
