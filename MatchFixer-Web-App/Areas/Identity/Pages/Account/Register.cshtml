@page
@model RegisterModel
@{
    ViewData["Title"] = "Register";
}

<div class="bg"></div>
<div class="bg bg2"></div>
<div class="bg bg3"></div>

<div class="register-container">
	<form id="registerForm" asp-route-returnUrl="@Model.ReturnUrl" method="post" class="register-form">
		
		<img src="~/images/matchFixer-logo.png" id="register-logo" alt="Logo" class="logo" />

		<h2>Create an account</h2>
		<hr/>
		<div asp-validation-summary="ModelOnly" class="badge bg-info text-dark pt-2 centered-validation" role="alert"></div>

		<div class="form-floating mb-3">
			<input asp-for="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com"/>
			<label asp-for="Input.Email">Email</label>
			<span asp-validation-for="Input.Email" class="badge bg-info text-dark pt-2 centered-validation"></span>
		</div>

		<div class="form-floating mb-3">
			<input asp-for="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" id="password-input1"  placeholder="password" />
			<label asp-for="Input.Password">Password</label>
			<span asp-validation-for="Input.Password" class="badge bg-info text-dark pt-2 centered-validation"></span>

			<button type="button" class="btn btn-sm btn-outline-secondary position-absolute top-50 end-0 translate-middle-y me-2 toggle-password-button"
			        onclick="togglePasswordVisibility('password-input1', 'toggle-password-icon1')" tabindex="-1">
				<i class="bi bi-eye" id="toggle-password-icon1"></i>
			</button>
		</div>

		<div class="form-floating mb-3">
			<input asp-for="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" id="password-input2" placeholder="confirm password" />
			<label asp-for="Input.ConfirmPassword">Retype Password</label>
			<span asp-validation-for="Input.ConfirmPassword" class="badge bg-info text-dark pt-2 centered-validation"></span>

			<button type="button" class="btn btn-sm btn-outline-secondary position-absolute top-50 end-0 translate-middle-y me-2 toggle-password-button"
			        onclick="togglePasswordVisibility('password-input2', 'toggle-password-icon2')" tabindex="-1">
				<i class="bi bi-eye" id="toggle-password-icon2"></i>
			</button>
		</div>
		
		<div class="form-floating mb-3">
			<select asp-for="Input.Country" asp-items="Model.CountryOptions" class="form-select">
				<option value="">Select your country</option>
			</select>
			<label asp-for="Input.Country">Country</label>
			<span asp-validation-for="Input.Country" class="badge bg-info text-dark pt-2 centered-validation"></span>
		</div>
		
		<input asp-for="Input.Timezone" type="hidden" id="timezoneHiddenInput" />
		<div id="timezoneWrapper" style="display:none;">
			<label for="timezoneDropdown">Select Time Zone</label>
			<select id="timezoneDropdown"></select>
		</div>


		
		<div class="button-wrapper">
			<button id="registerSubmit" type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
		</div>
		
		<div class="mt-3 login-links">
			<p>Already have an account ? <a asp-page="./Login" asp-route-returnUrl="@Model.ReturnUrl">Login</a></p>
		</div>


		@if ((Model.ExternalLogins?.Count ?? 0) > 0)
		{
			<hr/>
			<h5 class="text-center mt-4 mb-3">Or register with</h5>
			<div class="d-flex justify-content-center flex-wrap">
				@foreach (var provider in Model.ExternalLogins!)
				{
					<button type="submit" class="btn btn-outline-primary external-login-btn" name="provider" value="@provider.Name" title="Register using your @provider.DisplayName account">
						@provider.DisplayName
					</button>
				}
			</div>
		}
	</form>
</div>

@section Scripts {
	<partial name="_ValidationScriptsPartial" />

	<script>
		function togglePasswordVisibility(inputId, iconId) {

			const passwordInput = document.getElementById(inputId);
			const toggleIcon = document.getElementById(iconId);

			const isPassword = passwordInput.type === "password";
			passwordInput.type = isPassword ? "text" : "password";

			toggleIcon.classList.toggle("bi-eye");
			toggleIcon.classList.toggle("bi-eye-slash");
		}


		document.getElementById("Input_Country").addEventListener("change", async function () {
			const countryCode = this.value;

			if (!countryCode) return;

			const response = await fetch(`/api/timezones/${countryCode}`);
			const timezones = await response.json();

			const timezoneSelect = document.getElementById("timezoneDropdown");
			const timezoneWrapper = document.getElementById("timezoneWrapper");
			const timezoneHiddenInput = document.getElementById("timezoneHiddenInput");

			timezoneSelect.innerHTML = "";
			timezoneHiddenInput.value = "";

			// if more than one timezone for the selected country 
			if (timezones.length > 1) {
				timezoneWrapper.style.display = "block";

				const placeholderOption = document.createElement("option");
				placeholderOption.disabled = true;
				placeholderOption.selected = true;
				placeholderOption.text = "Select your timezone";
				timezoneSelect.appendChild(placeholderOption);

				timezones.forEach(zone => {
					const option = document.createElement("option");
					option.value = zone;
					option.text = zone;
					timezoneSelect.appendChild(option);
				});

				timezoneSelect.addEventListener("change", function () {
					timezoneHiddenInput.value = this.value;
				});
			} else if (timezones.length === 1) {
				// if only one timezone, set it directly
				timezoneWrapper.style.display = "none";
				timezoneHiddenInput.value = timezones[0];
			} else {
				// No timezones
				timezoneWrapper.style.display = "none";
			}
		});

	</script>
}
